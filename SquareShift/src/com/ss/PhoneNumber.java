package com.ss;

/**
 * Holder class for Phone number
 * 
 * @author Philip
 *
 */
public class PhoneNumber {

	public String phoneNumber;

	private Dictionary dictionary;

	private PhoneNumberSkip skipper = new PhoneNumberSkip();

	PhoneNumberSubstring numberSubstring = new PhoneNumberSubstring(this);

	PhoneNumberStringBuilder phoneNumberStringBuilder = new PhoneNumberStringBuilder();

	public PhoneNumber(String phoneNumber, Dictionary dictionary) {
		super();
		this.phoneNumber = phoneNumber;
		this.dictionary = dictionary;
	}

	public String getSubstring(int startIndex, int endIndex) {
		return phoneNumber.substring(startIndex, endIndex);
	}

	public String generateString() {

		while (numberSubstring.hasMoreCharactersToProcess()) {
			String currentSubString = numberSubstring.get();
			MatchWrapper matchWrapper = checkForMatch(currentSubString);
			if (!matchWrapper.isDictionaryStartMatchFound()) {
				if (skipper.canSkip(numberSubstring.getStartIndex())) {
					skip(currentSubString, matchWrapper);
				} else {
					return "";
				}
			}
			numberSubstring.increementEndIndex();
			if (!numberSubstring.hasMoreCharactersToProcess() && !matchWrapper.isFullMatchFound())
				return "";

		}
		return phoneNumberStringBuilder.getString();
	}

	private void skip(String currentSubString, MatchWrapper matchWrapper) {
		matchWrapper.setFullMatchFound();// if we are skipping it , then we should mark the current matchfound variable
		phoneNumberStringBuilder.addMatchedString(currentSubString.substring(0, 1));
		skipper.skip(numberSubstring.getStartIndex()); // informing skipper class of the current index that was skipped
		numberSubstring.increementStartIndex();
	}

	/**
	 * Check if there is any substring which was generated by Permutter class is
	 * available in dictionary.
	 * 
	 * @param currentSubstring
	 * @return
	 */
	private MatchWrapper checkForMatch(String currentSubstring) {
		MatchWrapper matchWrapper = new MatchWrapper();
		PhoneNumberPermutter permutter = new PhoneNumberPermutter(currentSubstring);
		String cur = null;
		while ((cur = permutter.getNext()) != "") {
			/*
			 * If there is not even a single word that starts with current permutted string,
			 * that means we should consider skipping.
			 */
			if (dictionary.startsWith(cur)) {
				matchWrapper.setDictionaryStartMatchFound();
			}

			if (dictionary.findItem(cur)) {
				phoneNumberStringBuilder.addMatchedString(cur);
				numberSubstring.moveStartIndexToEndIndex(); // once match is found, we can slide the window.
				matchWrapper.setFullMatchFound();
				break;
			}
		}
		return matchWrapper;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	class MatchWrapper {
		private boolean dictionaryStartMatchFound;
		private boolean fullMatchFound;

		public boolean isDictionaryStartMatchFound() {
			return dictionaryStartMatchFound;
		}

		public void setDictionaryStartMatchFound() {
			this.dictionaryStartMatchFound = true;
		}

		public boolean isFullMatchFound() {
			return fullMatchFound;
		}

		public void setFullMatchFound() {
			this.fullMatchFound = true;
		}

	}

}
